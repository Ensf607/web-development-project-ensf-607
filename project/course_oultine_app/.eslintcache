[{"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\index.js":"1","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\App.js":"2","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\reportWebVitals.js":"3","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\navigation\\Navbar.js":"4","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\add_outline_componenets\\FunInfo.js":"5","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\add_outline_componenets\\FunOutcome.js":"6","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\add_outline_componenets\\FunGrade.js":"7","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\pages\\AddCourse.js":"8","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\pages\\Home.js":"9","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\pages\\SearchCourse.js":"10","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\search_componenets\\SearchInfo.js":"11"},{"size":500,"mtime":1607997685370,"results":"12","hashOfConfig":"13"},{"size":755,"mtime":1608171433563,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1608076507851,"results":"15","hashOfConfig":"13"},{"size":2571,"mtime":1608171410726,"results":"16","hashOfConfig":"13"},{"size":2960,"mtime":1608171410723,"results":"17","hashOfConfig":"13"},{"size":5270,"mtime":1608256505988,"results":"18","hashOfConfig":"13"},{"size":19934,"mtime":1608254189200,"results":"19","hashOfConfig":"13"},{"size":407,"mtime":1608254361171,"results":"20","hashOfConfig":"13"},{"size":233,"mtime":1608171410728,"results":"21","hashOfConfig":"13"},{"size":1587,"mtime":1608259130112,"results":"22","hashOfConfig":"13"},{"size":639,"mtime":1608258621904,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1gscymv",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\index.js",[],["50","51"],"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\App.js",[],"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\reportWebVitals.js",[],"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\navigation\\Navbar.js",[],"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\add_outline_componenets\\FunInfo.js",[],"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\add_outline_componenets\\FunOutcome.js",["52"],"import React, { useState } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\n\r\n\r\nexport default function BasicTable() {\r\n  const [count, setCount] = useState(2);\r\n  const classes = useStyles();\r\n  const [rows, setRows] = useState([{ id: 1,  outcome: \"\" }]);\r\n  const [numbers,setNumbers]=useState([{id:1,num:1}])\r\n  const [outcomes,setOutcomes]=useState([{id:1,outcome:\"\"}])\r\n \r\n  const editNums=(id,num)=>{\r\n    let indx = numbers.findIndex((num)=>num.id===id)\r\n    let newNums=numbers\r\n    //console.log(indx)\r\n    if(indx>=0)\r\n    newNums[indx]={id:id,num:num}\r\n    else\r\n    newNums.push({id:id,num:num})\r\n    \r\n    setNumbers(newNums)\r\n   // console.log(numbers)\r\n  }\r\n  const ediOutcomes=(id,outcome)=>{\r\n    let indx = outcomes.findIndex((row) => row.id === id)\r\n    let newOutcomes=outcomes\r\n    if(indx>=0)\r\n    newOutcomes[indx]={id:id,outcome:outcome}\r\n    else\r\n    newOutcomes.push({id:id,outcome:outcome})\r\n  \r\n    setOutcomes(newOutcomes)\r\n    //console.log(outcomes)\r\n  }\r\n\r\n\r\n    const saveRow= (id) => {\r\n      \r\n      let numIndx = outcomes.findIndex((row) => row.id === id)\r\n      \r\n      let num=numbers[numIndx].num\r\n      let outcomeIndx=outcomes.findIndex((outcome)=> outcome.id===id)\r\n      let outcome=outcomes[outcomeIndx].outcome\r\n      let rowIndx = rows.findIndex((row) => row.id === id)\r\n      let newRows=rows\r\n      newRows[rowIndx]={ id: id,num:num,outcome: outcome }\r\n          \r\n      \r\n \r\n     setRows(newRows)\r\n     console.log(rows)\r\n\r\n      \r\n  };\r\n\r\n\r\n  const removeRow = (id) => {\r\n    let newRows = rows.filter((row) => row.id !== id)\r\n    \r\n    setRows(newRows)\r\n  }\r\n  const addRow = (id) => {\r\n    let newRows = rows\r\n    setCount(count+1)\r\n    let x=count\r\n    console.log(\"THIS IS \"+x)\r\n    newRows.push({ id: x, outcome: \"\" })\r\n    setRows(newRows)\r\n    console.log(rows)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <label className=\"label is-size-3 has-text-left pl-1\">2. Learning Outcomes</label>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <colgroup>\r\n            <col width=\"10%\" />\r\n            <col width=\"70%\" />\r\n\r\n          </colgroup>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Number</TableCell>\r\n              <TableCell align=\"right\">Learning Outcome</TableCell>\r\n\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            \r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                <TextField id=\"standard-basic\"   onChange={(e) => {\r\n        \r\n        editNums(row.id,e.target.value)\r\n      }} />\r\n                </TableCell>\r\n                <TableCell align=\"right\"><TextField id=\"standard-basic\" fullWidth={true} onChange={(e) => {\r\n        \r\n                  ediOutcomes(row.id,e.target.value)\r\n                }} /></TableCell>\r\n\r\n                <div className={classes.root}>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs>\r\n                      <Paper className={classes.paper}><Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        className={classes.button}\r\n                        size=\"small\"\r\n                        startIcon={<DeleteIcon />}\r\n                        onClick={()=>\r\n                        removeRow(row.id)}\r\n                      >\r\n                        Delete\r\n      </Button></Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                      <Paper className={classes.paper}><Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        onClick={()=>{\r\n                          saveRow(row.id)\r\n                        }}\r\n                        \r\n                      >\r\n                        Save\r\n      </Button></Paper>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </div>\r\n\r\n\r\n\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        <br />\r\n        <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n          addRow()\r\n        }}> +</Button>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\add_outline_componenets\\FunGrade.js",["53","54","55"],"import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nconst FunGrade=()=> {\r\n    var defaultTexts = [\"a) You must either achieve at least 50% on the final exam or achieve at least 50% on the weighted average of the midterm and final exam. You must also achieve an average of at least 50% on the lab section of the course. If you do not satisfy these caveats, you will not receive a passing grade.\",\r\n        \"b) Circumstances beyond one’s control (e.g. sickness, etc.), leading to missing lab session and/or delays in assignment submissions should be discussed with the course instructor as soon as possible. Proper documentation must be provided.\",\r\n        \"c) Conversion from a score out of 100 to a letter grade will be done using the conversion chart shown below. This grading scale can only be changed during the term if the grades will not be lowered.\"]\r\n    return (\r\n        <div className=\"FunGrade\">\r\n            {/*<h1> This is the Grade Section</h1>*/}\r\n            <label className=\"label is-size-3 has-text-left pl-1\">7. Final Grade Determination</label>\r\n            <p align=\"left\">The final grade in this course will be based on the following components:</p>\r\n            <div align=\"center\"><FinalGradeTable/></div>\r\n            <div class=\"content\" align=\"center\">\r\n                <h5 className=\"subtitle is-4\" align=\"left\"> Notes: </h5>\r\n                <Notes/>\r\n\r\n            </div>\r\n            <div align=\"center\"><LetterGradeTable/></div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// The first table\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n    return { name, calories, fat, carbs, protein };\r\n}\r\nfunction FinalGradeTable() {\r\n    const [count, setCount] = useState(2);\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([{ id: 1,  outcome: \"\" }]);\r\n    const [numbers,setNumbers]=useState([{id:1,num:1}])\r\n    const [outcomes,setOutcomes]=useState([{id:1,outcome:\"\"}])\r\n\r\n    const editNums=(id,num)=>{\r\n        let indx = numbers.findIndex((num)=>num.id===id)\r\n        let newNums=numbers\r\n        //console.log(indx)\r\n        if(indx>=0)\r\n            newNums[indx]={id:id,num:num}\r\n        else\r\n            newNums.push({id:id,num:num})\r\n\r\n        setNumbers(newNums)\r\n        // console.log(numbers)\r\n    }\r\n    const ediOutcomes=(id,outcome)=>{\r\n        let indx = outcomes.findIndex((row) => row.id === id)\r\n        let newOutcomes=outcomes\r\n        if(indx>=0)\r\n            newOutcomes[indx]={id:id,outcome:outcome}\r\n        else\r\n            newOutcomes.push({id:id,outcome:outcome})\r\n        setOutcomes(newOutcomes)\r\n        //console.log(outcomes)\r\n    }\r\n\r\n    const saveRow= (id) => {\r\n        let numIndx = outcomes.findIndex((row) => row.id === id)\r\n        let num=numbers[numIndx].num\r\n        let outcomeIndx=outcomes.findIndex((outcome)=> outcome.id===id)\r\n        let outcome=outcomes[outcomeIndx].outcome\r\n        let rowIndx = rows.findIndex((row) => row.id === id)\r\n        let newRows=rows\r\n        newRows[rowIndx]={ id: id,num:num,outcome: outcome }\r\n        setRows(newRows)\r\n        console.log(rows)\r\n    };\r\n\r\n    const removeRow = (id) => {\r\n        let newRows = rows.filter((row) => row.id !== id)\r\n\r\n        setRows(newRows)\r\n    }\r\n    const addRow = (id) => {\r\n        let newRows = rows\r\n        setCount(count+1)\r\n        let x=count\r\n        console.log(\"THIS IS \"+x)\r\n        newRows.push({ id: x, outcome: \"\" })\r\n        setRows(newRows)\r\n        console.log(rows)\r\n    }\r\n    return (\r\n        <>\r\n            <br />\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <colgroup>\r\n                        <col width=\"20%\" />\r\n                        <col width=\"40%\" />\r\n                        <col width=\"20%\" />\r\n\r\n                    </colgroup>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Component</TableCell>\r\n                            <TableCell>Learning Outcome(s) Evaluated</TableCell>\r\n                            <TableCell>Weight</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    <TextField id=\"standard-basic\" onChange={(e) => {\r\n\r\n                                        editNums(row.id,e.target.value)\r\n                                    }} />\r\n                                </TableCell>\r\n                                <TableCell><TextField id=\"standard-basic\" fullWidth={true} onChange={(e) => {\r\n\r\n                                    ediOutcomes(row.id,e.target.value)\r\n                                }} />\r\n                                </TableCell>\r\n\r\n                                <TableCell ><TextField id=\"standard-basic\" onChange={(e) => {\r\n\r\n                                    ediOutcomes(row.id,e.target.value)\r\n                                }} />\r\n                                </TableCell>\r\n\r\n\r\n                                <div className={classes.root}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item xs>\r\n                                            <Paper className={classes.paper}><Button\r\n                                                variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                                className={classes.button}\r\n                                                size=\"small\"\r\n                                                startIcon={<DeleteIcon />}\r\n                                                onClick={()=>\r\n                                                    removeRow(row.id)}\r\n                                            >\r\n                                                Delete\r\n                                            </Button></Paper>\r\n                                        </Grid>\r\n                                        <Grid item xs>\r\n                                            <Paper className={classes.paper}><Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                size=\"small\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                onClick={()=>{\r\n                                                    saveRow(row.id)\r\n                                                }}\r\n                                            >\r\n                                                Save\r\n                                            </Button></Paper>\r\n                                        </Grid>\r\n\r\n                                    </Grid>\r\n                                </div>\r\n\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <br />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                    addRow()\r\n                }}> +</Button>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n}\r\n// The second table\r\nfunction LetterGradeTable() {\r\n    const [count, setCount] = useState(2);\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([{ id: 1,  outcome: \"\" }]);\r\n    const [numbers,setNumbers]=useState([{id:1,num:1}])\r\n    const [outcomes,setOutcomes]=useState([{id:1,outcome:\"\"}])\r\n\r\n    const editNums=(id,num)=>{\r\n        let indx = numbers.findIndex((num)=>num.id===id)\r\n        let newNums=numbers\r\n        //console.log(indx)\r\n        if(indx>=0)\r\n            newNums[indx]={id:id,num:num}\r\n        else\r\n            newNums.push({id:id,num:num})\r\n\r\n        setNumbers(newNums)\r\n        // console.log(numbers)\r\n    }\r\n    const ediOutcomes=(id,outcome)=>{\r\n        let indx = outcomes.findIndex((row) => row.id === id)\r\n        let newOutcomes=outcomes\r\n        if(indx>=0)\r\n            newOutcomes[indx]={id:id,outcome:outcome}\r\n        else\r\n            newOutcomes.push({id:id,outcome:outcome})\r\n        setOutcomes(newOutcomes)\r\n        //console.log(outcomes)\r\n    }\r\n\r\n    const saveRow= (id) => {\r\n        let numIndx = outcomes.findIndex((row) => row.id === id)\r\n        let num=numbers[numIndx].num\r\n        let outcomeIndx=outcomes.findIndex((outcome)=> outcome.id===id)\r\n        let outcome=outcomes[outcomeIndx].outcome\r\n        let rowIndx = rows.findIndex((row) => row.id === id)\r\n        let newRows=rows\r\n        newRows[rowIndx]={ id: id,num:num,outcome: outcome }\r\n        setRows(newRows)\r\n        console.log(rows)\r\n    };\r\n\r\n    const removeRow = (id) => {\r\n        let newRows = rows.filter((row) => row.id !== id)\r\n\r\n        setRows(newRows)\r\n    }\r\n    const addRow = (id) => {\r\n        let newRows = rows\r\n        setCount(count+1)\r\n        let x=count\r\n        console.log(\"THIS IS \"+x)\r\n        newRows.push({ id: x, outcome: \"\" })\r\n        setRows(newRows)\r\n        console.log(rows)\r\n    }\r\n    return (\r\n        <>\r\n            <br />\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <colgroup>\r\n                        <col width=\"20%\" />\r\n                        <col width=\"20%\" />\r\n                        <col width=\"20%\" />\r\n                        <col width=\"20%\" />\r\n\r\n\r\n                    </colgroup>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Letter Grade</TableCell>\r\n                            <TableCell>Lower Boundary</TableCell>\r\n                            <TableCell>Total Mark (T) </TableCell>\r\n                            <TableCell>Upper Boundary</TableCell>\r\n\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    <TextField id=\"standard-basic\" onChange={(e) => {\r\n\r\n                                        editNums(row.id,e.target.value)\r\n                                    }} />\r\n                                </TableCell>\r\n                                <TableCell><TextField id=\"standard-basic\" fullWidth={true} onChange={(e) => {\r\n\r\n                                    ediOutcomes(row.id,e.target.value)\r\n                                }} />\r\n                                </TableCell>\r\n\r\n                                <TableCell ><th>≤  T  &lt;</th>\r\n                                </TableCell>\r\n\r\n                                <TableCell ><TextField id=\"standard-basic\" onChange={(e) => {\r\n\r\n                                    ediOutcomes(row.id,e.target.value)\r\n                                }} />\r\n                                </TableCell>\r\n\r\n\r\n                                <div className={classes.root}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item xs>\r\n                                            <Paper className={classes.paper}><Button\r\n                                                variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                                className={classes.button}\r\n                                                size=\"small\"\r\n                                                startIcon={<DeleteIcon />}\r\n                                                onClick={()=>\r\n                                                    removeRow(row.id)}\r\n                                            >\r\n                                                Delete\r\n                                            </Button></Paper>\r\n                                        </Grid>\r\n                                        <Grid item xs>\r\n                                            <Paper className={classes.paper}><Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                size=\"small\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                onClick={()=>{\r\n                                                    saveRow(row.id)\r\n                                                }}\r\n                                            >\r\n                                                Save\r\n                                            </Button></Paper>\r\n                                        </Grid>\r\n\r\n                                    </Grid>\r\n                                </div>\r\n\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <br />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                    addRow()\r\n                }}> +</Button>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Notes() {\r\n    const [count, setCount] = useState(2);\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([{ id: 1,  outcome: \"\" }]);\r\n    const [numbers,setNumbers]=useState([{id:1,num:1}])\r\n    const [outcomes,setOutcomes]=useState([{id:1,outcome:\"\"}])\r\n\r\n    const editNums=(id,num)=>{\r\n        let indx = numbers.findIndex((num)=>num.id===id)\r\n        let newNums=numbers\r\n        //console.log(indx)\r\n        if(indx>=0)\r\n            newNums[indx]={id:id,num:num}\r\n        else\r\n            newNums.push({id:id,num:num})\r\n\r\n        setNumbers(newNums)\r\n        // console.log(numbers)\r\n    }\r\n    const ediOutcomes=(id,outcome)=>{\r\n        let indx = outcomes.findIndex((row) => row.id === id)\r\n        let newOutcomes=outcomes\r\n        if(indx>=0)\r\n            newOutcomes[indx]={id:id,outcome:outcome}\r\n        else\r\n            newOutcomes.push({id:id,outcome:outcome})\r\n        setOutcomes(newOutcomes)\r\n        //console.log(outcomes)\r\n    }\r\n\r\n    const saveRow= (id) => {\r\n        let numIndx = outcomes.findIndex((row) => row.id === id)\r\n        let num=numbers[numIndx].num\r\n        let outcomeIndx=outcomes.findIndex((outcome)=> outcome.id===id)\r\n        let outcome=outcomes[outcomeIndx].outcome\r\n        let rowIndx = rows.findIndex((row) => row.id === id)\r\n        let newRows=rows\r\n        newRows[rowIndx]={ id: id,num:num,outcome: outcome }\r\n        setRows(newRows)\r\n        console.log(rows)\r\n    };\r\n\r\n    const removeRow = (id) => {\r\n        let newRows = rows.filter((row) => row.id !== id)\r\n\r\n        setRows(newRows)\r\n    }\r\n    const addRow = (id) => {\r\n        let newRows = rows\r\n        setCount(count+1)\r\n        let x=count\r\n        console.log(\"THIS IS \"+x)\r\n        newRows.push({ id: x, outcome: \"\" })\r\n        setRows(newRows)\r\n        console.log(rows)\r\n    }\r\n    return (\r\n        <>\r\n            <br />\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <colgroup>\r\n                        <col width=\"5%\" />\r\n                        <col width=\"5%\" />\r\n                        <col width=\"70%\" />\r\n\r\n                    </colgroup>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Note #</TableCell>\r\n                            <TableCell></TableCell>\r\n                            <TableCell>Note Message</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell align=\"right\"><TextField id=\"standard-basic\" onChange={(e) => {\r\n                                    ediOutcomes(row.id,e.target.value)\r\n                                }} /></TableCell>\r\n\r\n                                <TableCell align=\"right\">\r\n                                    <p>)</p>\r\n                                </TableCell>\r\n\r\n                                <TableCell align=\"right\"><TextField id=\"standard-basic\" fullWidth={true}  onChange={(e) => {\r\n                                    ediOutcomes(row.id,e.target.value)\r\n                                }} /></TableCell>\r\n\r\n\r\n                                <div className={classes.root}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item xs>\r\n                                            <Paper className={classes.paper}><Button\r\n                                                variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                                className={classes.button}\r\n                                                size=\"small\"\r\n                                                startIcon={<DeleteIcon />}\r\n                                                onClick={()=>\r\n                                                    removeRow(row.id)}\r\n                                            >\r\n                                                Delete\r\n                                            </Button></Paper>\r\n                                        </Grid>\r\n                                        <Grid item xs>\r\n                                            <Paper className={classes.paper}><Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                size=\"small\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                onClick={()=>{\r\n                                                    saveRow(row.id)\r\n                                                }}\r\n                                            >\r\n                                                Save\r\n                                            </Button></Paper>\r\n                                        </Grid>\r\n\r\n                                    </Grid>\r\n                                </div>\r\n\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <br />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>{\r\n                    addRow()\r\n                }}> +</Button>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n// export default\r\nexport default FunGrade;","C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\pages\\AddCourse.js",[],"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\pages\\Home.js",[],"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\pages\\SearchCourse.js",["56"],"C:\\Users\\zchem\\OneDrive\\Desktop\\University\\courses\\Fall-2020\\ENSF 607\\Web_Project\\web-development-project-ensf-607\\project\\course_oultine_app\\src\\search_componenets\\SearchInfo.js",["57","58","59","60"],"import React, { useState } from 'react';\r\nimport InfoData from '../data/DataInfo.json'\r\nconst FunInfo=()=> {\r\n  const info = InfoData[\"ENSF 409\"].courseName\r\n  const courseList=Object.keys(InfoData)\r\n  //const node2=InfoData.Info.find((n)=> n['ENSF 607'])\r\n  const [selectedCourse,setSelection]=useState()\r\n  //const outcome\r\n // const grade\r\n    return (\r\n      <div className=\"App\">\r\n        {courseList.map((n)=>{\r\n          return n\r\n        })}\r\n       // {/* {console.log(courseList.map((course)=>{course}))} */}\r\n        \r\n        <h1> This is Info section</h1>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default FunInfo;\r\n  ",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":22,"column":10,"nodeType":"67","messageId":"68","endLine":22,"endColumn":20},{"ruleId":"65","severity":1,"message":"69","line":17,"column":9,"nodeType":"67","messageId":"68","endLine":17,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":43,"column":10,"nodeType":"67","messageId":"68","endLine":43,"endColumn":20},{"ruleId":"65","severity":1,"message":"70","line":344,"column":11,"nodeType":"67","messageId":"68","endLine":344,"endColumn":19},{"ruleId":"65","severity":1,"message":"71","line":24,"column":12,"nodeType":"67","messageId":"68","endLine":24,"endColumn":15},{"ruleId":"65","severity":1,"message":"72","line":4,"column":9,"nodeType":"67","messageId":"68","endLine":4,"endColumn":13},{"ruleId":"65","severity":1,"message":"73","line":7,"column":10,"nodeType":"67","messageId":"68","endLine":7,"endColumn":24},{"ruleId":"65","severity":1,"message":"74","line":7,"column":25,"nodeType":"67","messageId":"68","endLine":7,"endColumn":37},{"ruleId":"75","severity":1,"message":"76","line":14,"column":12,"nodeType":"77","endLine":15,"endColumn":11},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'createData' is defined but never used.","Identifier","unusedVar","'defaultTexts' is assigned a value but never used.","'editNums' is assigned a value but never used.","'age' is assigned a value but never used.","'info' is assigned a value but never used.","'selectedCourse' is assigned a value but never used.","'setSelection' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-global-assign","no-unsafe-negation"]